library("devtools")
devtools::document() #updates things don't forget to add in the functions #'export
devtools::document() #updates things don't forget to add in the functions #'export
library("chromploid")
devtools::install_github("roszenil/chromploid")
library("chromploid")
library("geiger") #chromploid depends on geiger so don't forget to load it
log.params<-log(c(0.12, 0.001, 0.25, 0.002,0.036, 0.006, 0.04,0.02, 1.792317852, 1.57E-14))
N<- 50
mymatrix<-Q_bichrom(log.theta=log.params, size=N)
mymatrix
head(mymatrix)
mytree<- sim.bdtree(b=0.055, stop="taxa", n=500, seed=1)
plot(mytree,type="fan",cex=0.2, no.margin=TRUE)
set.seed(1) #Seed was fixed to obtain always the same sample for this tutorial
mysample<- chromploid_sim.char(phy=mytree, par=mymatrix,model="discrete", root=56)
chromploid_sim.char<-function (phy, par, nsim = 1, model = "discrete", root = 1)
{
model = match.arg(model, c("BM", "speciational", "discrete"))
model.matrix = geiger:::.make.modelmatrix(par, model)
nbranches <- nrow(phy$edge)
nspecies <- Ntip(phy)
if (length(root) > 1)
stop("'root' should be a single value")
if (model %in% c("BM", "speciational")) {
m <- .get.simulation.matrix(phy)
if (model == "speciational") {
m[m > 0] <- 1
}
nchar <- nrow(model.matrix)
rnd <- t(mvrnorm(nsim * nbranches, mu = rep(0, nchar),
Sigma = model.matrix))
rnd <- array(rnd, dim = c(nchar, nbranches, nsim))
simulate <- function(v, root) (m %*% as.matrix(v)) +
root
result <- apply(rnd, 1, simulate, root)
result <- aperm(array(result, dim = c(nspecies, nsim,
nchar)), c(1, 3, 2))
rownames(result) <- phy$tip.label
}
else {
rt = nspecies + 1
zphy = reorder.phylo(phy, "postorder")
el = zphy$edge.length
nchar <- length(model.matrix)
result <- array(0, dim = c(nspecies, nchar, nsim))
.get.state = function(s, p) {
pp = cumsum(p[s, ])
min(which(runif(1) < pp))
}
for (j in 1:nchar) {
m = model.matrix[[j]]
if (!root %in% c(1:nrow(m)))
stop(paste("'root' must be a character state from 1 to ",
nrow(m), sep = ""))
p = lapply(el, function(l) expm:::expm(m * l, method="Higham08"))
for (k in 1:nsim) {
node.value <- numeric(nspecies + Nnode(zphy))
node.value[rt] <- root
for (i in nbranches:1) {
cur = zphy$edge[i, 2]
anc = zphy$edge[i, 1]
curp = p[[i]]
s = node.value[anc]
node.value[cur] = .get.state(s, curp)
}
result[, j, k] <- node.value[1:nspecies]
}
}
rownames(result) <- zphy$tip.label
}
result<-data.frame(taxa=zphy$tip.label,sample=as.numeric(result))
return(result)
}
mysample<- chromploid_sim.char(phy=mytree, par=mymatrix,model="discrete", root=56)
mysample
nllike<-negloglikelihood(log.par=log.params, phy=mytree,   tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike<-chromploid_nllike(log.par=log.params, phy=mytree,   tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike
set.seed(1) #Seed was fixed to obtain always the same sample for this tutorial
mysample<- chromploid_sim.char(phy=mytree, par=mymatrix,model="discrete", root=56)
mysample
nllike<-chromploid_nllike(log.par=log.params, phy=mytree,   tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike
#' Calculates the negative log-likelihood of a chromosome or ploidy model
#'
#' @param log.par A vector of parameter values in ln scale. Length of the vector depends on model defined by Q.FUN
#' @param phy Binary rooted phylogenetic tree
#' @param tip.values A data frame with at least two columns first column has tip labels in the same order than phylogenetic tree, second column ploidy or chromosome numbers depending on Q.FUN
#' @param pi.0 Probability distribution to be used at the root of phylogeny
#' @param Q.FUN A function that calculates the Q-matrix of the parameters of interest
#' @param Q.ARGS A list of arguments to be passed to Q.FUN
#' @return Result is the negative log-likelihood of parameters log.par given the model in Q.FUN
#' @author Rosana Zenil-Ferguson
#' @export
chromploid_nllike <- function(log.par, phy, tip.values, pi.0, Q.FUN, Q.ARGS) {
if (!is.list(Q.ARGS)) stop("Q.ARGS must be a list")
Q.FUN <- match.fun(Q.FUN)
Q.mat <-do.call(Q.FUN, args=c(list(log.par),Q.ARGS)) #do.call(Q.FUN, args = list(log.par, unlist(Q.ARGS)))
if (any(abs(rowSums(Q.mat)) > 1e-8)==TRUE){
print("At least one row in the Q-matrix does not add to zero")
break
}
charnum=1
nb.tip <- length(phy$tip.label)
nb.node <- phy$Nnode
nl <- nrow(Q.mat)
#Now we need to build the matrix of likelihoods to pass to dev.raydisc:
liks <- matrix(0, nb.tip + nb.node, nl)
#Now loop through the tips.
for(i in 1:nb.tip){
#The codon at a site for a species is not NA, then just put a 1 in the appropriate column.
#Note: We add charnum+1, because the first column in the data is the species labels:
if(!is.na(tip.values[i,charnum+1])){
liks[i,tip.values[i,charnum+1]] <- 1
}else{
#If here, then the site has no data, so we treat it as ambiguous for all possible codons. Likely things might be more complicated, but this can modified later:
liks[i,] <- 1
}
}
#The result here is just the likelihood:
result <- pruning_like(p=NULL, phy=phy, liks=liks, Q=Q.mat, rate=NULL, root.p=pi.0)
return(result)
}
nllike<-chromploid_nllike(log.par=log.params, phy=mytree,   tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
x.0<- log(c(0.12, 0.001, 0.25, 0.002,0.036, 0.006, 0.04,0.02, 1.792317852, 1.57e-14))
results<-rep(0,11) #vector useful to save optimization results
my.options<-list("algorithm"= "NLOPT_LN_SBPLX","ftol_rel"=1e-08,"print_level"=1,"maxtime"=170000000, "maxeval"=1000)
mle<-nloptr(x0=x.0,eval_f=chromploid_nllike,opts=my.options, phy=mytree, tip.values=mysample,pi.0=NULL,Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
library(nloptr)
install.packages(nloptr)
install.packages("nloptr")
results<-rep(0,11) #vector useful to save optimization results
my.options<-list("algorithm"= "NLOPT_LN_SBPLX","ftol_rel"=1e-08,"print_level"=1,"maxtime"=170000000, "maxeval"=1000)
mle<-nloptr(x0=x.0,eval_f=chromploid_nllike,opts=my.options, phy=mytree, tip.values=mysample,pi.0=NULL,Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
library(nloptr)
mle<-nloptr(x0=x.0,eval_f=chromploid_nllike,opts=my.options, phy=mytree, tip.values=mysample,pi.0=NULL,Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
library("chromploid")
devtools::install_github("roszenil/chromploid")
library("chromploid")
nllike<-negloglikelihood(log.par=log.params, phy=mytree, tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom,  Q.ARGS=list(size=50))
mle<-nloptr(x0=x.0,eval_f=chromploid_nllike,opts=my.options, phy=mytree, tip.values=mysample,pi.0=NULL,Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike<-chromploid_nllike(log.par=log.params, phy=mytree, tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom,  Q.ARGS=list(size=50))
rm(chromploid_nllike
)
rm(chromploid_sim.char)
devtools::install_github("roszenil/chromploid")
library("chromploid")
devtools::install_github("roszenil/chromploid",force=TRUE)
library("chromploid")
mle<-nloptr(x0=x.0,eval_f=chromploid_nllike,opts=my.options, phy=mytree, tip.values=mysample,pi.0=NULL,Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike<-chromploid_nllike(log.par=log.params, phy=mytree,   tip.values=mysample, pi.0=NULL, Q.FUN=Q_bichrom, Q.ARGS = list(size=50))
nllike
#' Calculates Q-matrix for BiChroM model
#' @details Q_bichromlinear determines the Q-matrix for a model of chromosome number change associated with a binary state with traits coded as 0 or 1. It is linear because binary trait change rate is a linear function of chromosome number.
#' @details This is a beta version, the linear function for binary trait change rate from state 0 to 1 is  kappa0+ (chromosome number)*q01
#' @param log.theta vector of size 12 indicating parameters in ln scale for BiChoM the order of the parameters is (lambda0, lambda1, mu0, mu1, rho0, rho1, kappa0, q01, kappa1, q10, e0, e1)
#' @param size Maximum number of chromosomes in the sample (recommended no more than 50, states larger than that should be coded as 51)
#' @return Q a sparse matrix of size 2*(size+1)
#' @export
Q_bichromlinear<-function(log.theta,size){
#Parameters
theta<-exp(log.theta)
l.0<-theta[1]
l.1<-theta[2]
m.0<-theta[3]
m.1<-theta[4]
r.0<-theta[5]
r.1<-theta[6]
k.0<-theta[7]
prob.01<-theta[8]
k.1<-theta[9]
prob.10<-theta[10]
e.0<-theta[11]
e.1<-theta[12]
C<-size+1
#Building the sparse matrix
Q<-rep(0,4*C*C)
Q<- matrix(Q,ncol=2*C)
aux1<- floor(size/2)
aux2<- 2*C-1 ###############????????????
Q[1,1]<- -(l.0+r.0+ k.0+prob.01)
Q[1,2]<- l.0+r.0
Q[1,(C+1)]<-k.0+prob.01
for(i in 2:aux1){
Q[i,i]<- -(m.0+l.0+r.0+k.0+i*prob.01)
Q[i,(i-1)]<-m.0
Q[i,(i+1)]<-l.0
Q[i,(2*i)]<-r.0
Q[i,(C+i)]<- k.0+i*prob.01
}
for (i in (aux1+1):(C-1)){
Q[i,i]<- -(m.0+l.0+r.0+k.0+i*prob.01)
Q[i,(i-1)]<- m.0
Q[i,(i+1)]<- l.0
Q[i,C]<- r.0+Q[i,C]
Q[i,(C+i)]<- k.0+i*prob.01
}
Q[C,C]<- -(e.0)
Q[C,(2*C)]<-e.0
###################################################
Q[(C+1),(C+1)]<- -(l.1+r.1+k.1+prob.10)
Q[(C+1),(C+2)]<- l.1+r.1
Q[(C+1),1]<-k.1+prob.10
for(i in (C+2):(C+aux1)){
Q[i,i]<- -(m.1+l.1+r.1+k.1+(i-C-1)*prob.10)
Q[i,(i-1)]<-m.1
Q[i,(i+1)]<-l.1
Q[i,(2*i-C)]<-r.1
Q[i,(i-C)]<- k.1+(i-C-1)*prob.10
}
for(i in (C+aux1+1):aux2){
Q[i,i]<- -(m.1+l.1+r.1+k.1+(i-C-1)*prob.10)
Q[i,(i-1)]<-m.1
Q[i,(i+1)]<-l.1
Q[i,2*C]<- r.1+Q[i,2*C]
Q[i,(i-C)]<- k.1+(i-C-1)*prob.10
}
Q[(2*C),(2*C)]<- -(e.1)
Q[(2*C),C]<-e.1
return(Q)
}
a<-log(1:12)
Q_bichromlinear(a,20)
Q_bichromlinear(a,5)
#' Calculates Q-matrix for BiChroM model
#' @details Q_bichromlinear determines the Q-matrix for a model of chromosome number change associated with a binary state with traits coded as 0 or 1. It is linear because binary trait change rate is a linear function of chromosome number.
#' @details This is a beta version, the linear function for binary trait change rate from state 0 to 1 is  kappa0+ (chromosome number)*q01
#' @param log.theta vector of size 12 indicating parameters in ln scale for BiChoM the order of the parameters is (lambda0, lambda1, mu0, mu1, rho0, rho1, kappa0, q01, kappa1, q10, e0, e1)
#' @param size Maximum number of chromosomes in the sample (recommended no more than 50, states larger than that should be coded as 51)
#' @return Q a sparse matrix of size 2*(size+1)
#' @export
Q_bichromlinear<-function(log.theta,size){
#Parameters
theta<-exp(log.theta)
l.0<-theta[1]
l.1<-theta[2]
m.0<-theta[3]
m.1<-theta[4]
r.0<-theta[5]
r.1<-theta[6]
k.0<-theta[7]
prob.01<-theta[8]
k.1<-theta[9]
prob.10<-theta[10]
e.0<-theta[11]
e.1<-theta[12]
C<-size+1
#Building the sparse matrix
Q<-rep(0,4*C*C)
Q<- matrix(Q,ncol=2*C)
aux1<- floor(size/2)
aux2<- 2*C-1 ###############????????????
Q[1,1]<- -(l.0+r.0+ k.0+prob.01)
Q[1,2]<- l.0+r.0
Q[1,(C+1)]<-k.0+prob.01
for(i in 2:aux1){
Q[i,i]<- -(m.0+l.0+r.0+k.0+i*prob.01)
Q[i,(i-1)]<-m.0
Q[i,(i+1)]<-l.0
Q[i,(2*i)]<-r.0
Q[i,(C+i)]<- k.0+i*prob.01
}
for (i in (aux1+1):(C-1)){
Q[i,i]<- -(m.0+l.0+r.0+k.0+i*prob.01)
Q[i,(i-1)]<- m.0
Q[i,(i+1)]<- l.0
Q[i,C]<- r.0+Q[i,C]
Q[i,(C+i)]<- k.0+i*prob.01
}
Q[C,C]<- -(e.0)
Q[C,(2*C)]<-e.0
###################################################
Q[(C+1),(C+1)]<- -(l.1+r.1+k.1+prob.10)
Q[(C+1),(C+2)]<- l.1+r.1
Q[(C+1),1]<-k.1+prob.10
for(i in (C+2):(C+aux1)){
Q[i,i]<- -(m.1+l.1+r.1+k.1+(i-C)*prob.10)
Q[i,(i-1)]<-m.1
Q[i,(i+1)]<-l.1
Q[i,(2*i-C)]<-r.1
Q[i,(i-C)]<- k.1+(i-C)*prob.10
}
for(i in (C+aux1+1):aux2){
Q[i,i]<- -(m.1+l.1+r.1+k.1+(i-C)*prob.10)
Q[i,(i-1)]<-m.1
Q[i,(i+1)]<-l.1
Q[i,2*C]<- r.1+Q[i,2*C]
Q[i,(i-C)]<- k.1+(i-C)*prob.10
}
Q[(2*C),(2*C)]<- -(e.1)
Q[(2*C),C]<-e.1
return(Q)
}
Q_bichromlinear(a,5)
library("devtools")
devtools::create("chromploid") #creates the package
devtools::load_all() #loads the components
devtools::use_package("MASS") # dependencies of other packages
devtools::use_package("geiger")
devtools::use_package("phytools","Suggests") # suggestions of other packages to use
devtools::install() #reloads it
library("devtools")
devtools::document() #updates things don't forget to add in the functions #'export
devtools::use_package("geiger")
library(knitr)
library(rmarkdown)
build_vignettes(pkg="chromploid")
devtools::install() #reloads it
build_vignettes(pkg="chromploid")
library("chromploid")
build_vignettes(pkg="chromploid")
build_vignettes(pkg=chromploid)
build_vignettes()
check_built()
devtools::load_all #loads the components
devtools::load_all() #loads the components
?Q_bichromlinear
?Q_bibichrom
output: rmarkdown::pdf_document
render("chromploid.Rmd", "pdf_document")
render("input.Rmd", "pdf_document")
render("chromploid.Rmd", "pdf_document")
render("chromploid.Rmd.R", "pdf_document")
dir()
setwd("/Users/roszenil/Dropbox/Chromploid package/chromploid github/vignettes")
render("chromploid.Rmd.R", "pdf_document")
render("chromploid.Rmd", "pdf_document")
